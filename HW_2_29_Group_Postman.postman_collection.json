{
	"info": {
		"_postman_id": "d75a81a3-f904-48c1-b33d-80582ca81e8c",
		"name": "HW_2_29_Group_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Olena",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// . Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"   ",
							"});",
							"  ",
							"",
							"// 3. Спарсить response body в json.",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"let jsonData = pm.response.json();",
							"",
							"let name = \"Olena\";",
							"let name_response_check = jsonData.name;",
							"console.log (name);",
							"console.log (name_response_check);",
							"",
							" let req = request.data",
							" console.log (req);",
							" let req_name = req.name;",
							" console.log(req_name)",
							"",
							"pm.test(\"Name Check\", function (){",
							"pm.expect(name).to.eql(jsonData.name)",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.expect(req_name).to.eql(jsonData.name)})",
							"",
							"",
							"",
							"let age = \"38\";",
							"let age_response_check = jsonData.age;",
							"console.log (age);",
							"console.log (age_response_check);",
							"",
							"let req_age = req.age;",
							" console.log(req_age)",
							"",
							"pm.test(\"Age Check\", function (){",
							"    // 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.expect(req_age).to.eql(jsonData.age)",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.expect(age).to.eql(jsonData.age)",
							"})",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							" let  salary = 750;",
							" let salary_response_check = jsonData.salary;",
							" console.log (salary);",
							"console.log (salary_response_check);",
							"",
							"let req_salary = +req.salary;",
							" console.log(req_salary)",
							"",
							"pm.test(\"Salary Check\", function (){",
							" pm.expect(salary).to.eql(jsonData.salary)",
							"",
							"//  10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							" pm.expect(req_salary).to.eql(jsonData.salary)",
							" })",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							" let para_family =jsonData.family",
							" console.log(para_family)",
							"",
							"//  Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year",
							"console.log(resp_u_salary_1_5_year )",
							"",
							"let salary_1 = req.salary*4",
							"",
							"pm.test(\"Salary_Check_1\", function (){",
							" pm.expect(resp_u_salary_1_5_year).to.eql(salary_1)",
							" ",
							" })",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olena",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "750",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Olena/jjd909/13529kjkWpqc5392123456322501evny\"",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// . Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"   ",
							"});",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							" console.log(jsonData)",
							"",
							"// 4. Спарсить request.",
							" let req = pm.request.url.query.toObject()",
							" console.log(req)",
							"",
							"//  5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let name_response = jsonData.name",
							"console.log(name_response)",
							"",
							"let name_request = req.name",
							"console.log(name_request)",
							"",
							"",
							"pm.test(\"Name_check\", function () {",
							"   ",
							"    pm.expect(name_response).to.eql(name_request);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"let age_response = jsonData.age",
							"console.log(age_response)",
							"",
							"let age_request = req.age",
							"console.log(age_request)",
							"",
							"",
							"pm.test(\"Age_check\", function () {",
							"   ",
							"    pm.expect(age_response).to.eql(age_request);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"let salary_response = jsonData.salary",
							"console.log(salary_response)",
							"",
							"let salary_request = +req.salary",
							"console.log(salary_request)",
							"",
							"",
							"pm.test(\"Salary_check\", function () {",
							"   ",
							"    pm.expect(salary_response).to.eql(salary_request);",
							"});",
							"",
							"// Вывести в консоль параметр family из response.",
							" let param_family =jsonData.family",
							" console.log(param_family)",
							"",
							"//  9. Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"Dog_Name_check\", function () {",
							"   ",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"// let parametr_1 = jsonData.family.pets.dog.age",
							"// console.log(parametr_1)",
							"pm.test(\"Dog_Age_check\", function () {",
							"   ",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky",
							"let parametr_2 = jsonData.family.pets.dog.name",
							"console.log(parametr_2)",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"let parametr_3 = jsonData.family.pets.dog.age",
							"console.log(parametr_3)",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olena",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "750",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Olena/jjd909/13529kjkWpqc5392123456322501evny\"",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "162.55.220.72:5007/object_info_3?age=38&name=Olena&salary=750",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "name",
							"value": "Olena"
						},
						{
							"key": "salary",
							"value": "750"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"// 3. Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							" console.log(jsonData)",
							"",
							"// 4. Спарсить request.",
							" let req = pm.request.url.query.toObject()",
							" console.log(req)",
							"",
							"//  5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"let name_response = jsonData.name",
							"let name_request = req.name",
							"",
							"pm.test(\"Check_name\", function () {",
							"    ",
							"    pm.expect(name_response).to.eql(name_request);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"let age_response = jsonData.age",
							"let age_request  = +req.age",
							"",
							"pm.test(\"Age_check\", function () {",
							"    ",
							"    pm.expect(age_response).to.eql(age_request);",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log (req.salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(jsonData.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(jsonData.salary[2])",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"let salary_response = +jsonData.salary[1]",
							"let salary_request  = req.salary*2",
							"",
							"pm.test(\"Salary_check\", function () {",
							"    ",
							"    pm.expect(salary_response).to.eql(salary_request);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"let salary_response_1 = +jsonData.salary[2]",
							"let salary_request_1  = req.salary*3",
							"",
							"pm.test(\"Salary_check_1\", function () {",
							"    ",
							"    pm.expect(salary_response).to.eql(salary_request);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 18. Передать в окружение переменную name",
							"let jsonData_1 = pm.response.json()",
							"let name_response_1 = jsonData_1.name",
							"pm.environment.set(\"name\", name_response_1);",
							"",
							"// 16. Создать в окружении переменную age",
							"// 19. Передать в окружение переменную age",
							"",
							"let age_response_1 = jsonData_1.age",
							"pm.environment.set(\"age\",  age_response_1);",
							"",
							"",
							"// 17. Создать в окружении переменную salary",
							"// // 20. Передать в окружение переменную salary",
							"",
							"let salary_response_2 = jsonData_1.salary",
							"pm.environment.set(\"salary\",  salary_response_2);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"const arr = jsonData_1.salary",
							"for (let i=0; i<arr.length;  i++){",
							"  console.log(arr[i])",
							"} ",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olena",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "750",
							"type": "text"
						},
						{
							"key": "age",
							"value": "38",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Olena/jjd909/13529kjkWpqc5392123456322501evny\"",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "162.55.220.72:5007/object_info_4?age=38&name=Olena&salary=750",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "name",
							"value": "Olena"
						},
						{
							"key": "salary",
							"value": "750"
						}
					]
				}
			},
			"response": []
		}
	]
}